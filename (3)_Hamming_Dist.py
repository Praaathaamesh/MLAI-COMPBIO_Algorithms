def hamming_distance(s1, s2):
    """
    Calculates the Hamming distance between two strings of equal length.
    """
    return sum(c1 != c2 for c1, c2 in zip(s1, s2))


def distance_between_pattern_and_strings(pattern, dna):
    k = len(pattern)
    distance = 0

    for text in dna:
        min_hamming = float('inf')

        # Iterate through all k-mers in text
        for i in range(len(text) - k + 1):
            kmer = text[i:i+k]
            curr_hamming = hamming_distance(pattern, kmer)
            min_hamming = min(min_hamming, curr_hamming)

        distance += min_hamming

    return distance


# Test the function with the given sample input
pattern = "GCTCT"
dna = ['TAGACCCAGTGTAGAGGAGAGGAGGTTGAGCCATAGGCCGGGCGACTCAGCGGGCCTTGAAGTAGGACGCTCGGGACTACTTGTCATCACATACCGCTGGAGCCGACCTG', 'TAACCCCAGGCCGGTATCATGACGTCGCTAAAGAGTCCCCGGGACGTAGCATCGTCGGTAGAGGTTATCCCGGGGTAGCCGAAAAAGTGTCTCTTTGTGCCACACTGTGT', 'GTCCTCCGGTCGTATGTTATCACCTGGGAGATTATGAGGGTATGGGTTCCGTTATGTGCATATTACCGTGGCTCCTCTCGCATAACGAAAGTTGAATCAACTTCGACACG', 'CGTTTTTTGATATAAGGGTAATCCTAGACGGCCTGTGTTTCGTGTTCCTCCAACAGGTTATAGGCATCTCCCGTGAAGCAGATGGCAGGAGGAGCAACCTGTAAAGTTGA', 'AGCTGGCATGGCATCGGAGAGTGGCTCCCTACGATTACTTTTAGGACGCACTTCTTCGGTTCTTTGGACTTTTGTCGGGACCATGCGCGGGCTCAAAACCCAGCGTTTGG', 'TATGAATCTCCTTCAATAGGCGCCGGGATCAGTCAGCGCTTTCCTTGTGTCCCCGTTGAGGGACTTCGCCTCTCTGACTGTGCCTGCGCTAATAAATCATTTCATTCGAG', 'CTCTAGGCAAGGCAAGTTTTCACAAACAAGTGTTGTAGAATATCCTACAAGATAAGCAGTCCGATCCCTTAGTTGAGTACCCTCTACCGCGTCACCCGCGGTACCACTTC', 'TCAGGCGATTTAACTTCGTGGTGCTCCACCTTTTCCATAGTGGAACAAGCCGTTGACTTTAAAAACTTCTACATTTCGCTTCAGGCTTCAATGATCTTGTGCAGCAGTTA', 'CCTGCACAGAGAGAAGAATCTGTCTATATCACTGTAGCGCTACCCATTGGGGGCATGGCGGAGCTGCCACGGAGATAGATATCGCTCCACTGCCAATGATGTTACGGCTC', 'GCAGGCACTTGTAGAAAGGACCATGACTGCCATTAATGCGCATTCCATAAACTCATCGTGGAATAGGCGATTTCTGCTACCTTGGGTAGCCCGCAGGGCACTGGCCAACG', 'TGAACGTGAAACCTGCCGATCCAACACTGGTCATCCCATATAAACGATTTGGTTTGAGGCGCAACGCCTGTGTAGTTCATAATCAGCAATAAATACTTTTCACGATGTCA', 'TGTCGCGACCCATGGTCCTTGCACTTGGTCAGCCTGTCTTCCTGCGACCATTCCGCGGGCTAAAGTCCAGCGGACGGTCCTGTCGGGGGGGTTCACCAGCGATCAAGCCG', 'CTTCCTGACGCAGTGTCCTGCGCACTCGATGTGGTTTGAAACAAAGTCCGCGCCTCAATTGAGGATCCCGTTCACGTGCCTTCTGTGCTTAAAACCGAGCGACGCCTAGT', 'ATCGTTTCCGAAAGTGGACGCTTCTTAACAGTATGAGACCCCTTGCTCTGCCGATAGCGCATAATACTTTATCAGTACGCTGAACCAAAGGGTCGCATCCACCAGCGTCG', 'CTTTGGTCGAGCTAGTAGTTCCAGATAACAACAGTATCATAGACTTACAGGGATCTAGCCTCGCCCAAGGGGTACACGATTTCATCAGGCGCCACATGGATTATTCTCCT', 'GTTCATGACGTAATAGACTCTGCCATACGCTCTCTCTGAAGATAGCCGTTACGTTAGGGTCACGAACTGCGCCCCAGAGGAACTAGCTTTAGAGTGGCGTGTCGCTTTTT', 'TTAGGCGACCATTACACAAGATACCTTCTAACTAGTTGCTTCCTCTCACTTATGATGCGTAGACCGACCCGTGCCAACGCGGTAAAGAAAATGCCCGTAAGCACAGGAAT', 'GTGTGTTTGAGTTGGTTTTTACAATATAGTATACGAACATTGGTCTGTGGAGGCTTACCTAACTTCCCGATGAAAACGTGAATGGTCAAAGTCACTAACGGGACAAATGA', 'GCAAAGTAGTCACTACAAGCTGAAGCCCTTTCACCATGCTAGGCTCATACTCCTCATGCCTCGCTGGAAATATAGAGTGTTAGGGTGTATGCAGGGGCAAACTAACATGG', 'TTTATAAACCGGAGGCCGCAAGTGTGTAACATGACAAGTGGTCTGAATCAGCAAGTGATCGGTTCTATGACCGGGTCAACAAATCGCAGCCTGATTAGGCAGTGATCAAG', 'TATAGGTGGAATCCGCTTCTGTAACCGGCGGCTTTCCCAGTCCAACTCACAGCCAGAGTCACCCTGCTGCGAAATCCCTAGCGACTATAGGCAGTGTAATTGGAAAAACT', 'CCACCTAGAGCCAGGCTTTGAGTTTAACTCACCCCCTGAACTCGGTGTAGGCGAATCTCAAAGTAAGAAGTTTGCTAACTCTAACCTTTTGATGCAATTCACGAGAGGGA', 'CCTGCCTGCCTACCACCAGTGCTGCTGTGTTAACTTTTCATAGTTACGGTATCGCACGCGTTAGCCCACTAGCGCTAATCCAGGGACTAAGGGTTTTTCAGACCTCGTCT', 'TGTAGTGAGCGAGCCAGTCTTAATTGTATGATGGAGAATGACACCTATTGCTGTTGGTCAAGACCTATCATTTGTAGGGGGTAATGGTCGATACAGTTATACTAGTTAGA', 'TCAACTCGCCGTTTGTCTCAGTGGGATACAAAAACGTCGTGGCCCAGTGTTCCCGGGTATTCAAGCTACTATGCCTGACGAAACGAGTCCAGGATACGTTTCTTACAGCC', 'ATGTTCTCAACGTTTGTAACACATTGTATGTCGCTATTGTAATACCCTAGTACTCTCATACAATAAGAAATAGTGTGACCATTCTCGATTGGTCCACGGGGGCCAACGGA', 'TTCTACTTGGGGCGAGTCCCAACTTCTACTTACCATCACCAAGAAGTGTCGTTTTGGATGATACTGACTAACCCAATTAGGACTTGCCGAGTTGGTTTAGTGCCTGGTGT', 'AGCGCATTACGATCCGCTGTCCCGGAATATTCTATGTAGTGACTAAGTGACTCGGAGTATTAAAGTTACAATAAAAGTCCGCGGCTAACTGTGATAAGAGCATACTAGCC', 'GGAATAACTGTGAAGGGGAAAAACCCAGTGAACGAACGTCGCTCGAGCGTGACACGTACCGCTGCTAAGACAGAAAGTGGTTCGTCCTGCCTCTTGCAAAGCCCAGTACC', 'ATCCGCTGTTCATTGAGGTCTGGTTATTCTTTGGAGGCAACATGACTCAGTGCCGGGGCGATGACGCCGGCTCTTTTGTCTCGCAATGGTGTGCTGTGAGGCTCCCAATC', 'AATTCGACATGTACTTAGATTAAATACACCTTGACCGTGGCTATTTGTTCGAGTCTTAAACAAATCGTGGCGTAAGTTGATAATCGCTTGCGATTGAACTTAAGCTCGTG', 'GTGAGGTTGGTCTGGTTGAGGGAACCAACTGTGAGATGTCAGGTATCTAGCACGATAGAAAGTATGGTAGGTGGGGGACGGACCGGATACTTATGAAAATGCACAAACGC', 'TGAATGTAGGCCGTCACACGAAGGTTCCAACGCGAGATGTGTCCTTGAGAACTTGTGCTACTTCGTTTATGGATCCGGTCGCGGAAAGTTCCATCGATTTGCGCGGTAAG',]

result = distance_between_pattern_and_strings(pattern, dna)
print(result)
