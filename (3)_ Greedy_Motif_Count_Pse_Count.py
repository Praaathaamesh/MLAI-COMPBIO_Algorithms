def profile_most_probable_kmer(text, k, profile):
    n = len(text)
    max_prob = -1
    most_probable_kmer = ""

    for i in range(n - k + 1):
        kmer = text[i:i+k]
        prob = 1

        for j in range(k):
            if kmer[j] == 'A':
                prob *= profile[0][j]
            elif kmer[j] == 'C':
                prob *= profile[1][j]
            elif kmer[j] == 'G':
                prob *= profile[2][j]
            elif kmer[j] == 'T':
                prob *= profile[3][j]

        if prob > max_prob:
            max_prob = prob
            most_probable_kmer = kmer

    return most_probable_kmer


def greedy_motif_search(dna, k, t):
    best_motifs = []
    n = len(dna[0])

    for i in range(t):
        best_motifs.append(dna[i][:k])

    for j in range(n - k + 1):
        motifs = [dna[0][j:j+k]]

        for i in range(1, t):
            profile = create_profile(motifs[:i], pseudocounts=True)
            motif = profile_most_probable_kmer(dna[i], k, profile)
            motifs.append(motif)

        if score(motifs) < score(best_motifs):
            best_motifs = motifs

    return best_motifs


def create_profile(motifs, pseudocounts=False):
    profile = [[0] * len(motifs[0]) for _ in range(4)]
    t = len(motifs)

    for i in range(len(motifs[0])):
        counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
        for j in range(t):
            counts[motifs[j][i]] += 1

        # Incorporate pseudocounts if pseudocounts=True
        if pseudocounts:
            for key in counts:
                counts[key] += 1

        for key in counts:
            profile['ACGT'.index(key)][i] = counts[key] / (t + 4) if pseudocounts else counts[key] / t

    return profile


def score(motifs):
    t = len(motifs)
    k = len(motifs[0])
    score = 0

    for i in range(k):
        counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
        for j in range(t):
            counts[motifs[j][i]] += 1
        max_count = max(counts.values())
        score += t - max_count

    return score


# Test the function with the given sample input
k = 12
t = 25
dna = ['TCATGAGCTGGTCTTATCACTGGCAGGCAGAAAGCTCATCTTATGCGTTCCATATGCTATCGTGTCCCACCCTAGATGCGGGGCCGTTTAGCGGGAAGTTAACGCTCGTGCTGTGATATCTGAATAGTTAAGTGCCTTGCACTCCTCACGTAATGC', 'ACCTGAGAGACTAGACACGCAGGAAGCGGATTTACCTCTCGTTCTTCAGTTAAGTTATTAATGGTATGTACTACTTAAACTGGCTGAGCAGTTGAGCGTTTAGCTCGGAACAATCCCCCTCCATCGTCAACTTGCCCTATTTCTATTCAAGTCTTT', 'ATGACCCAGGAGATTCTGGCCCTTAAGTACACCTGCTAGGGAGGCACTTGAATAGTTGTGGTCCTACCCGACCACTAGCTTTCTTCGAGGCCGAAAAAACTGATTTGATGTCCGGAGTAGCGTCTGCTGCGTGTCAAGGGGTCCATACTAACACCT', 'TCATTTATTACGGGCGGAGTAATTTGGCTTACGGCCTGCAAATTCTGCGAAATACCCCGGCACCGCTTGCTGCGGTGCTTGTCAAAGTTACCGAAGGCTCTGGGCTGCATATAACGCCGCTACCTGAATCGATGAGGAGTTGAGAGCTCATTCCCT', 'TGAGAAGTTGGGTCGAAGGAATAGAACCCTACCTTGGTGAGCACTTCGCACCTGGGTATGAAAAGCCATCAGCTCACGGTGGACCACTGAAAATGATACTAACAGCGGCTGTCATGCGTAAGCTAACAGACAAGTCGACCGTGTTCATGATCAGGC', 'TAGCGCTGAAGCGAATGCGATCGTGTTATACAGTATAGCACTGTGGAGCTTATGGCTAATCGAAAGGCTCCGTGGCCCACTGACCTACGGGGTGGGCTGCGCAAGGACTGAGAAGTTAAGATCGACCGACGGAAGGTAAGCACCACTTGAAGAGTC', 'GCCTTTATCAGACATCACACGGCACTAGTAGTCAAGACATCTCCGGGAACCGAACACTATGTTCAGGCCGTTGCACTTAATTAGTGCGGACTGTATCGGGCTCAATATTGGTGTATCCATTGATCAGTTCTGCGTGGTCAACTCCGGCCAATTCAG', 'ATATATGGCAAACCGATGTTAAGATTTAGCCTCCAAGGATTTCGCACCAGAGGATCAACCGTGATAGTAAGGTGTACATCGCGCTGAAGAGTTAAGCGGATACTTATTATGCTTCGATGCAATCCTAGTTAATCCTGTTCCAAGCAAGGTATTACA', 'TAAAATAGCCGACAACCATAAGTTGTTTAAGAGGATTTTCGGTGACGCAATTGTGTATTGGTCTCCAAGTAAATCGAGGGTCAGCGGACCCTCAGCGATTACAAACTTTGATCAGTTACGGCAGTTTATGACGTCGCTGCAATATCCCGTCACATA', 'TCGGTTTAACTCAGGATAGTCAAGATCTTACGGTGTACATGTGCCCGTTGAGTAGTTCGGTTGTCGTCGCACGCTGAAGGTTCATTTGTAGTGGACGGGTGGGTACCGAAGAAAGGGTGGTCAAAGATACCTTCCTGACGGACGTGACTTTGATGT', 'TGGGCATGCAGCCAAGGTGTTTGCGCGGCTCCTCGAAATGGCCAACAGAGCTATTCTTTCTACTCTCTTAACCAAAGATTTACCCCTGGATTTGCTTGCTCCCGTACCTGAATAGTTAGGATATCCAACGCAATTGCGTCCAAAATGAGCCTCTGG', 'CAATAGCTCCTCAAATGAGCCCTGTTCTCAGACGCGTGAGCACATAGTTGATTAGTTGTGTTACTCAACAGTACTTTCTACATTTCGCTACCATTGATCATCGCTTAGATTTCAAAAGTACCTAACAATATCCAGCAGAGCGGCGCTTCCCCATAG', 'ACGGCTGAACTATCTGCAGGTGGCATTGGCGATGCCATAAGAACAGCTTCAGAGTATCCGTATGGATTTACCAGATGTCCGTTGCAAGTCCAGAACCCGCTCTGTCCGCGACAGTACCACCACGAATTTAAATGATAAGTTCGGGGCTGAATTCAC', 'GGATCTCTGCCATGACCAGTTTCGACTGATATCATTGATGAGTTAAAGGCTCAACACCCCGATAGGTGCCATAACCACCAGCAACGGGACCGACACATAAGTAATATGGATAAGTTCTATAAGAATACGATGATGCTCCCGGCAATGTTATTATTA', 'GGGCAGAACCTGGCAAGCCGGTTTCTGCCCGGCACATGCCATCCCCCAGGCGTTGAACTTAATGTCGGGAATGAGCTACGTGGATGCAATATCTCGTGAGCAGTTGCGCCGGCGTTCTTTTAGCGACTCTAGAAATAACGACTGGGTAACAATGTC', 'GGACTCTAGTTCCTGGTCGCGCATATTGCCAAGGAGCTGTACGATATCGCAAGACTTCAACTGACCTATTACAACTACTATTATGCTTGAGTCGTTTCCAGCATGCTAAGCTCAGTGCGACACATGTGGACTTGATTAGTTAAGGGGCTTCTTACA', 'AACACGCGCTGAGGCTCCCCGGCTTGAAGAGTTGGGGTGCTAGAACAGTCAAGGAAATAGCGTGGGGCCGTTCGCGTGATAATGCGTTTCTTGCGACCTGGGTCGATTCGACTCGGACCCCGCATGACCTGCTACGGAGTTGGTGTAGAGCCATTT', 'TGAAGAGTTGCGATCACGTCGAGACCCCGCGAATAGGTCTGATCGCCCCCTACCCCCTACCAAAGAGATTCGACCTCTGCGGGATCGACCTCCGTATTCAAACTACGTCCACGACTAAACCCGATTGTGGACTTTGACTCATTGAGAAAAGTAACC', 'GCCTTTTGCCACTGGTCAAGCAGGCTCCGGCGTTATCCCAGGCGCTTAGTCAAGACACCCCTACACCTACAAAATCTGAACCACATCGACACGGTGTGATCAGTTAAGACAATTAGGACCCTGTAAGTAGATCTTTGGGTAGCCCATGCTTCAATG', 'AGGAAGCCCTCGATAAGTGCAGGAACGTGACCAAGGAGGATTCTAATCTGACTAGTTTTGCACTTCTTTCCCTACACAGAACTTCACTCATGCTCGACGGCCACATTTCTTTCTTCGCAGTGCGATGCGTGTTGGCATTAGATAGAGTCAAGTTCT', 'GCCCATTGCCACCCTATATGGTACGGATTTCGTAGCTGACTGGTTTCATAGACGCCCTAGACGTGATAAGATTATTAGTCGTTGGGTAGATAATGTTAGCCAAACGAGTGACAAGTTCAGTGCAACACATGAAGGGATACTCAAGAAGATCACAAA', 'GGGTAGGTGACCGATCCGTATCGTCCGTTAGGACCTTGATGAGTTCTGGGCAACAACATGGCAACCTTACGCTGGCTCACCGCGGGCTTCCCACCTGTGTTAGTCCGGCTGCGGGATCTTGTGTTACGCCGGGTCTTATAAAATATGAGTGATGGG', 'TTCTCTTGCCTGGACTTGTGTTCCTTTCGGTTCGCGTCGCGTTCCTCGGGCCAGGATGTTTGACCAGTTGGGCAGTTAGCAAATCCGACGTGCGGCATTTCGATTCGTCGGAAGCTGATAATCCTAAGATAACGTTAATAGATATGGATTACCGGA', 'GAACACTTGAATTAGACTTACCGCGTTTCGGACACCTTACAGGGTTCCTTTGCTGTCCCATGAACAGTTACGAAGTAGTTGCATAGAGTTCGATCGTGTGAAACATGGTTAATGAAGTAGGTAAAACGTGTATTCTCGTATCGGTAATATCATGAC', 'AACTTGCTGTGTTTACATTTAGAATGATGAGTTTGGAGTTCAATCTAGAGGTTAGTTCGGTACCGTACATACATGACAAATAGTGTTAACTCGGTCGCAGGGATTCTGCATTCACGGCATGTGGCTCTACTCATGATGAATATATAATTCTTCGAT']
best_motifs = greedy_motif_search(dna, k, t)
for motif in best_motifs:
    print(motif)
